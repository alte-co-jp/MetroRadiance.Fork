<UserControl x:Class="MetroRadiance.Showcase.UI.ControlSamples"
			 xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
			 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
			 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
			 xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
			 xmlns:metro="http://schemes.grabacr.net/winfx/2014/controls"
             xmlns:prop="clr-namespace:MetroRadiance.Showcase.Properties"
			 xmlns:ui="clr-namespace:MetroRadiance.Showcase.UI"
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
			 mc:Ignorable="d"
			 d:DesignWidth="500"
			 d:DesignHeight="1200">
    <UserControl.Resources>
        <x:Array x:Key="DataItems" Type="{x:Type ui:SampleDataItem}">
            <ui:SampleDataItem Id="1" Name="Name a" Description="AAAA" Active="True" Selected="Name c" />
            <ui:SampleDataItem Id="3" Name="Name b" Description="TTTT" Active="False" />
            <ui:SampleDataItem Id="9" Name="Name c" Description="ZZZZ" />
            <ui:SampleDataItem Id="12" Name="Name d" Description="xxxx" />
            <ui:SampleDataItem Id="15" Name="Name e" Description="aaaa" />
        </x:Array>
        <CollectionViewSource x:Key="DataItemsView1"  Source="{StaticResource DataItems}" />
        <CollectionViewSource x:Key="DataItemsView2"  Source="{StaticResource DataItems}" />
        <ObjectDataProvider x:Key="dataGridHeadersVisibilityProvider"
							MethodName="GetValues"
							ObjectType="{x:Type sys:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="DataGridHeadersVisibility"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>
        <ObjectDataProvider x:Key="dataGridGridLinesVisibilityProvider"
							MethodName="GetValues"
							ObjectType="{x:Type sys:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="DataGridGridLinesVisibility"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>
        <ObjectDataProvider x:Key="dataGridSelectionUnitProvider"
							MethodName="GetValues"
							ObjectType="{x:Type sys:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="DataGridSelectionUnit"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>
    </UserControl.Resources>

    <ScrollViewer HorizontalScrollBarVisibility="Disabled"
				  VerticalScrollBarVisibility="Auto">
        <StackPanel Margin="8,0,8,8">
            <ui:ThemeControls/>

            <Border Height="2"
				Background="{DynamicResource BorderBrushKey}"
				Margin="0,8,0,4" />

            <TextBlock Text="{x:Static prop:Resources.ControlSample_GroupHeader}"
					   FontFamily="Segoe UI"
					   FontSize="18"
					   Foreground="{DynamicResource ForegroundBrushKey}"
					   HorizontalAlignment="Center"
					   Margin="0,0,0,8" />

            <Menu>
                <MenuItem Header="_File">
                    <MenuItem Header="_New">
                        <MenuItem Header="_Solution"
								  InputGestureText="Ctrl+Shift+N"
								  IsEnabled="{Binding ElementName=EnabledCheck, Path=IsChecked}">
                            <MenuItem.Icon>
                                <Ellipse Fill="{DynamicResource ForegroundBrushKey}" />
                            </MenuItem.Icon>
                        </MenuItem>
                        <MenuItem Header="_Project"
								  InputGestureText="Ctrl+N"
								  IsEnabled="{Binding ElementName=EnabledCheck, Path=IsChecked}">
                            <MenuItem.Icon>
                                <Rectangle Fill="{DynamicResource ForegroundBrushKey}" />
                            </MenuItem.Icon>
                        </MenuItem>
                    </MenuItem>
                    <Separator />
                    <MenuItem Header="_Exit"
							  InputGestureText="Alt+F4" />
                </MenuItem>
                <MenuItem Header="_Edit"
						  IsEnabled="{Binding ElementName=EnabledCheck, Path=IsChecked}">
                    <MenuItem Header="_Undo"
							  InputGestureText="Ctrl+Z" />
                    <MenuItem Header="_Redo"
							  InputGestureText="Ctrl+Y" />
                    <Separator />
                    <MenuItem Header="Cu_t"
							  InputGestureText="Ctrl+X" />
                    <MenuItem Header="_Copy"
							  InputGestureText="Ctrl+C" />
                    <MenuItem Header="_Paste"
							  InputGestureText="Ctrl+V" />
                </MenuItem>
                <MenuItem Header="_Help">
                    <MenuItem Header="_Help window" IsCheckable="True" IsChecked="True" />
                    <MenuItem Header="_Help windows">
                        <MenuItem Header="_Help window" IsCheckable="True" IsChecked="True" />
                    </MenuItem>
                    <MenuItem Header="_About" />
                </MenuItem>
                <Separator/>
                <MenuItem Header="TopLevelItem (Standard)" IsCheckable="False" IsChecked="False"/>
                <MenuItem Header="TopLevelItem (Checked)" IsCheckable="False" IsChecked="True"/>
                <MenuItem Header="TopLevelItem (Checkable)" IsCheckable="True" IsChecked="True"/>
                <MenuItem Header="TopLevelHeader">
                    <MenuItem Header="SubmenuItem (Standard)" IsCheckable="False" IsChecked="False" />
                    <MenuItem Header="SubmenuItem (Checked)" IsCheckable="False" IsChecked="True" />
                    <MenuItem Header="SubmenuItem (Checkable)" IsCheckable="True" IsChecked="True" />
                    <Separator/>
                    <MenuItem Header="SubmenuHeader">
                        <MenuItem Header="SubmenuItem (Standard)" IsCheckable="False" IsChecked="False" />
                        <MenuItem Header="SubmenuItem (Checked)" IsCheckable="False" IsChecked="True" />
                        <MenuItem Header="SubmenuItem (Checkable)" IsCheckable="True" IsChecked="True" />
                    </MenuItem>
                    <MenuItem Header="SubmenuHeader (Checked)" IsChecked="True">
                        <MenuItem Header="SubmenuItem (Standard)" IsCheckable="False" IsChecked="False">
                            <MenuItem.Icon>
                                <Ellipse Fill="{DynamicResource ForegroundBrushKey}" />
                            </MenuItem.Icon>
                        </MenuItem>
                        <MenuItem Header="SubmenuItem (Checked)" IsCheckable="False" IsChecked="True">
                            <MenuItem.Icon>
                                <Ellipse Fill="{DynamicResource ForegroundBrushKey}" />
                            </MenuItem.Icon>
                        </MenuItem>
                        <MenuItem Header="SubmenuItem (Checkable)" IsCheckable="True" IsChecked="True">
                            <MenuItem.Icon>
                                <Ellipse Fill="{DynamicResource ForegroundBrushKey}" />
                            </MenuItem.Icon>
                        </MenuItem>
                    </MenuItem>
                </MenuItem>
            </Menu>

            <CheckBox x:Name="EnabledCheck"
					  Content="{x:Static prop:Resources.ControlSample_IsEnabledUIControls}"
					  IsChecked="True"
					  Margin="4" />
            <Grid Margin="12,0"
						IsEnabled="{Binding ElementName=EnabledCheck, Path=IsChecked}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <TextBlock Grid.Row="0" Grid.Column="0" Text="TextBox: "/>
                <TextBox Grid.Row="0" Grid.Column="1" Margin="5" Text="TextBox" />

                <TextBlock Grid.Row="1" Grid.Column="0" Text="TextBox with UInt16Rule: "/>
                <TextBox Grid.Row="1" Grid.Column="1" Margin="5">
                    <TextBox.Text>
                        <Binding Path="UInt16"
								 UpdateSourceTrigger="PropertyChanged">
                            <Binding.ValidationRules>
                                <metro:UInt16Rule Min="1"
												 Max="49" />
                            </Binding.ValidationRules>
                        </Binding>
                    </TextBox.Text>
                    <TextBox.Style>
                        <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
                            <Style.Triggers>
                                <Trigger Property="Validation.HasError" Value="True">
                                    <Setter Property="ToolTip">
                                        <Setter.Value>
                                            <Binding 
                                                Path="(Validation.Errors)[0].ErrorContent"
                                                RelativeSource="{x:Static RelativeSource.Self}" />
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </TextBox.Style>
                </TextBox>

                <TextBlock Grid.Row="4" Grid.Column="0" Text="metro:PromptTextBox: "/>
                <metro:PromptTextBox Grid.Row="4" Grid.Column="1"  Margin="5"/>

                <TextBlock Grid.Row="5" Grid.Column="0" Text="metro:PromptTextBox with Int32Rule: "/>
                <metro:PromptTextBox Grid.Row="5" Grid.Column="1"  Margin="5">
                    <metro:PromptTextBox.Text>
                        <Binding Path="Int32"
								 UpdateSourceTrigger="PropertyChanged">
                            <Binding.ValidationRules>
                                <metro:Int32Rule Min="-4"
											 Max="49" />
                            </Binding.ValidationRules>
                        </Binding>
                    </metro:PromptTextBox.Text>
                </metro:PromptTextBox>
                <TextBlock Grid.Row="6" Grid.Column="0" Text="metro:PromptTextBox with DobuleRule: "/>
                <metro:PromptTextBox Grid.Row="6" Grid.Column="1"  Margin="5">
                    <metro:PromptTextBox.Text>
                        <Binding Path="Double"
								 UpdateSourceTrigger="Default">
                            <Binding.ValidationRules>
                                <metro:DoubleRule Min="-4.9"
												 Max="9.9" />
                            </Binding.ValidationRules>
                        </Binding>
                    </metro:PromptTextBox.Text>
                </metro:PromptTextBox>

                <TextBlock Grid.Row="8" Grid.Column="0" Text="metro:PromptComboBox: "/>
                <metro:PromptComboBox Grid.Row="8" Grid.Column="1"
                                      Margin="5"
									  IsEditable="True">
                    <ComboBoxItem>2.2</ComboBoxItem>
                    <ComboBoxItem>1</ComboBoxItem>
                    <ComboBoxItem>-10</ComboBoxItem>
                    <ComboBoxItem>-1</ComboBoxItem>
                </metro:PromptComboBox>
                <TextBlock Grid.Row="9" Grid.Column="0" Text="metro:PromptComboBox with Int32Rule: "/>
                <metro:PromptComboBox Grid.Row="9" Grid.Column="1"
                                      Margin="5"
									  IsEditable="True">
                    <metro:PromptComboBox.Text>
                        <Binding Path="Int32"
								 UpdateSourceTrigger="PropertyChanged">
                            <Binding.ValidationRules>
                                <metro:Int32Rule Min="-4"
												 Max="49" />
                            </Binding.ValidationRules>
                        </Binding>
                    </metro:PromptComboBox.Text>
                    <ComboBoxItem>2.2</ComboBoxItem>
                    <ComboBoxItem>1</ComboBoxItem>
                    <ComboBoxItem>-10</ComboBoxItem>
                    <ComboBoxItem>-1</ComboBoxItem>
                </metro:PromptComboBox>

                <TextBlock Grid.Row="12" Grid.Column="0" Text="PasswordBox: "/>
                <PasswordBox Grid.Row="12" Grid.Column="1"
                             Margin="5" />

                <TextBlock Grid.Row="14" Grid.Column="0" Text="CheckBox: "/>
                <CheckBox Grid.Row="14" Grid.Column="1" Content="{x:Static prop:Resources.ControlSample_TextCheckBox}"
						  Margin="4" />

                <TextBlock Grid.Row="16" Grid.Column="0" Text="RadioButton / GroupBox: "/>
                <GroupBox Grid.Row="16" Grid.Column="1" Header="{x:Static prop:Resources.ControlSample_GroupBoxHeader}" >
                    <StackPanel Orientation="Vertical">
                        <RadioButton Content="{x:Static prop:Resources.ControlSample_TextRadioButtonItem1}"
								 Margin="4" />
                        <RadioButton Content="{x:Static prop:Resources.ControlSample_TextRadioButtonItem2}"
								 Margin="4" />
                        <RadioButton Content="{x:Static prop:Resources.ControlSample_TextRadioButtonItem3}"
								 Margin="4" />
                    </StackPanel>
                </GroupBox>

                <TextBlock Grid.Row="18" Grid.Column="0" Text="ToggleButton: "/>
                <ToggleButton Grid.Row="18" Grid.Column="1" Content="{x:Static prop:Resources.ControlSample_TextToggleButton}"
						  Margin="4" />

                <TextBlock Grid.Row="20" Grid.Column="0" Text="ComboBox: "/>
                <ComboBox Grid.Row="20" Grid.Column="1"
						  Margin="4"
                          SelectedIndex="0">
                    <ComboBoxItem Content="{x:Static prop:Resources.ControlSample_TextComboBoxItem1}"/>
                    <ComboBoxItem Content="{x:Static prop:Resources.ControlSample_TextComboBoxItem2}"/>
                    <ComboBoxItem Content="{x:Static prop:Resources.ControlSample_TextComboBoxItem3}"/>
                </ComboBox>

                <TextBlock Grid.Row="22" Grid.Column="0" Text="ComboBox (Editable): "/>
                <ComboBox Grid.Row="22" Grid.Column="1"
                          IsEditable="True"
						  Margin="4"
                          SelectedIndex="0">
                    <ComboBoxItem Content="{x:Static prop:Resources.ControlSample_TextComboBoxItem1}"/>
                    <ComboBoxItem Content="{x:Static prop:Resources.ControlSample_TextComboBoxItem2}"/>
                    <ComboBoxItem Content="{x:Static prop:Resources.ControlSample_TextComboBoxItem3}"/>
                </ComboBox>

                <TextBlock Grid.Row="26" Grid.Column="0" Text="Tooltip/ContextMenu: "/>
                <Border Grid.Row="26" Grid.Column="1"
                        Margin="4"
                        BorderThickness="1"
                        BorderBrush="{DynamicResource BorderBrushKey}">
                    <Border.ContextMenu>
                        <ContextMenu>
                            <MenuItem Header="Item"/>
                            <MenuItem Header="Item with shortcut" InputGestureText="Ctrl+Z"/>
                            <MenuItem Header="Item with sub items">
                                <MenuItem Header="Sub item"/>
                                <MenuItem Header="Sub item with shortcut" InputGestureText="Ctrl+Z"/>
                                <Separator/>
                                <MenuItem Header="Checkable sub item" IsCheckable="True" IsChecked="True"/>
                                <MenuItem Header="Disabled sub item" IsEnabled="False"/>
                            </MenuItem>
                            <Separator/>
                            <MenuItem Header="Checkable item" IsCheckable="True" IsChecked="True"/>
                            <MenuItem Header="Disabled item" IsEnabled="False"/>
                            <Separator/>
                            <MenuItem Header="SubmenuItem (Standard)" IsCheckable="False" IsChecked="False" />
                            <MenuItem Header="SubmenuItem (Checked)" IsCheckable="False" IsChecked="True" />
                            <MenuItem Header="SubmenuItem (Checkable)" IsCheckable="True" IsChecked="True" />
                            <MenuItem Header="SubmenuHeader (Standard)">
                                <MenuItem Header="SubmenuItem (Standard)" IsCheckable="False" IsChecked="False" />
                                <MenuItem Header="SubmenuItem (Checked)" IsCheckable="False" IsChecked="True" />
                                <MenuItem Header="SubmenuItem (Checkable)" IsCheckable="True" IsChecked="True" />
                                <Separator/>
                                <MenuItem Header="SubmenuHeader (Standard)">
                                    <MenuItem Header="SubmenuItem (Standard)" IsCheckable="False" IsChecked="False" />
                                    <MenuItem Header="SubmenuItem (Checked)" IsCheckable="False" IsChecked="True" />
                                    <MenuItem Header="SubmenuItem (Checkable)" IsCheckable="True" IsChecked="True" />
                                </MenuItem>
                                <MenuItem Header="SubmenuHeader (Checked)" IsChecked="True">
                                    <MenuItem Header="SubmenuItem (Standard)" IsCheckable="False" IsChecked="False">
                                        <MenuItem.Icon>
                                            <Ellipse Fill="{DynamicResource ForegroundBrushKey}" />
                                        </MenuItem.Icon>
                                    </MenuItem>
                                    <MenuItem Header="SubmenuItem (Checked)" IsCheckable="False" IsChecked="True">
                                        <MenuItem.Icon>
                                            <Ellipse Fill="{DynamicResource ForegroundBrushKey}" />
                                        </MenuItem.Icon>
                                    </MenuItem>
                                    <MenuItem Header="SubmenuItem (Checkable)" IsCheckable="True" IsChecked="True">
                                        <MenuItem.Icon>
                                            <Ellipse Fill="{DynamicResource ForegroundBrushKey}" />
                                        </MenuItem.Icon>
                                    </MenuItem>
                                </MenuItem>
                            </MenuItem>
                        </ContextMenu>
                    </Border.ContextMenu>
                    <Label ToolTip="{x:Static prop:Resources.ControlSample_TextTooltipSamleText}">
                        <TextBlock 
                           TextWrapping="Wrap"
                           Text="{x:Static prop:Resources.ControlSample_TextTooltipDesc}">
                        </TextBlock>
                    </Label>
                </Border>

                <TextBlock Grid.Row="30" Grid.Column="0" Text="DataGrid: "/>
                <Grid Grid.Row="30" Grid.Column="1">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <DataGrid Grid.Row="0"
                              Margin="0,4"
                              ItemsSource="{Binding Source={StaticResource DataItemsView1}}"
                              HeadersVisibility="{Binding SelectedItem,ElementName=DataGrid_HeadersVisibility}"
                              GridLinesVisibility="{Binding SelectedItem,ElementName=DataGrid_GridLinesVisibility}"
                              SelectionUnit="{Binding SelectedItem,ElementName=DataGrid_SelectionUnit}"
                              AlternatingRowBackground="{DynamicResource MetroRadiance.Brushes.DataGrid.Static.Row.AlternatingBackground}"
                              AutoGenerateColumns="False">
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="Id"
                                                IsReadOnly="True"
                                                Binding="{Binding Id}"/>
                            <DataGridTextColumn Header="Text (R/W)"
                                                Binding="{Binding Description}"/>
                            <DataGridTextColumn Header="Text (R)"
                                                IsReadOnly="True"
                                                Binding="{Binding Name,Mode=OneWay}"/>
                            <DataGridCheckBoxColumn Header="CheckBox (R/W)"
                                                    Binding="{Binding Active,UpdateSourceTrigger=PropertyChanged}"
                                                    IsThreeState="True"/>
                            <DataGridCheckBoxColumn Header="CheckBox (R)"
                                                    IsReadOnly="True"
                                                    Binding="{Binding Active,Mode=OneWay}"
                                                    IsThreeState="True"/>
                            <DataGridComboBoxColumn Header="ComboBox (R/W)"
                                                    SelectedValueBinding="{Binding Selected,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"
                                                    DisplayMemberPath="Name"
                                                    SelectedValuePath="Name"
                                                    ItemsSource="{StaticResource DataItems}"/>
                            <DataGridComboBoxColumn Header="ComboBox (R)"
                                                    IsReadOnly="True"
                                                    SelectedValueBinding="{Binding Selected,Mode=OneWay}"
                                                    DisplayMemberPath="Name"
                                                    SelectedValuePath="Name"
                                                    ItemsSource="{StaticResource DataItems}"/>
                            <DataGridTextColumn Header="Selected item (R)"
                                                IsReadOnly="True"
                                                Binding="{Binding Selected,Mode=OneWay}"/>
                            <DataGridTemplateColumn Header="Template">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <TextBlock
                                            Text="{Binding Selected,Mode=OneWay}" />
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                                <DataGridTemplateColumn.CellEditingTemplate>
                                    <DataTemplate>
                                        <ComboBox
                                            ItemsSource="{StaticResource DataItems}"
                                            DisplayMemberPath="Name"
                                            SelectedValuePath="Name"
                                            SelectedValue="{Binding Selected,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellEditingTemplate>
                            </DataGridTemplateColumn>
                        </DataGrid.Columns>
                    </DataGrid>
                    <StackPanel Grid.Row="1" Orientation="Horizontal">
                        <TextBlock Text="HeadersVisibility: "/>
                        <ComboBox x:Name="DataGrid_HeadersVisibility"
                                  ItemsSource="{Binding Source={StaticResource dataGridHeadersVisibilityProvider}}"
                                  SelectedIndex="3"/>
                        <TextBlock Text="    GridLinesVisibility: "/>
                        <ComboBox x:Name="DataGrid_GridLinesVisibility"
                                  ItemsSource="{Binding Source={StaticResource dataGridGridLinesVisibilityProvider}}"
                                  SelectedIndex="0"/>
                        <TextBlock Text="    SelectionUnit: "/>
                        <ComboBox x:Name="DataGrid_SelectionUnit"
                                  ItemsSource="{Binding Source={StaticResource dataGridSelectionUnitProvider}}"
                                  SelectedIndex="1"/>
                    </StackPanel>
                </Grid>
            </Grid>

            <Border Height="2"
				Background="{DynamicResource BorderBrushKey}"
				Margin="0,8,0,4" />

            <TextBlock Text="{x:Static prop:Resources.WindowSample_GroupHeader}"
					   FontFamily="Segoe UI"
					   FontSize="18"
					   Foreground="{DynamicResource ForegroundBrushKey}"
					   HorizontalAlignment="Center"
					   Margin="0,0,0,8" />

            <WrapPanel Margin="12,0"
                        Orientation="Horizontal">
                <Button Margin="4,4"
					    Height="30"
					    HorizontalAlignment="Left"
					    Click="HandleSystemWindowButtonClicked">
                    <Label Content="{x:Static prop:Resources.ControlSample_ButtonCreateSystemWindow}"/>
                </Button>
                <Button Margin="4,4"
					    Height="30"
					    HorizontalAlignment="Left"
					    Click="HandleBlurWindowButtonClicked">
                    <Label Content="{x:Static prop:Resources.ControlSample_ButtonCreateBlurWindow}"/>
                </Button>
                <Button Margin="4,4"
					    Height="30"
					    HorizontalAlignment="Left"
					    Click="HandleAcrylicBlurWindowButtonClicked">
                    <Label Content="{x:Static prop:Resources.ControlSample_ButtonCreateAcrylicBlurWindow}"/>
                </Button>
            </WrapPanel>
        </StackPanel>
    </ScrollViewer>
</UserControl>
