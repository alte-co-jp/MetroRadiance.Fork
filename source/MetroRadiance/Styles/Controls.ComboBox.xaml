<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MetroRadiance;component/Styles/Controls.TextBox.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <SolidColorBrush x:Key="MetroRadiance.Brushes.ComboBox.Static.Foreground" Color="{DynamicResource ActiveForegroundColorKey}"/>
    <SolidColorBrush x:Key="MetroRadiance.Brushes.ComboBox.Static.Glyph" Color="{DynamicResource ForegroundColorKey}"/>
    <SolidColorBrush x:Key="MetroRadiance.Brushes.ComboBox.Static.Background" Color="{DynamicResource BackgroundColorKey}"/>
    <SolidColorBrush x:Key="MetroRadiance.Brushes.ComboBox.Static.Border" Color="{DynamicResource BorderColorKey}"/>
    <SolidColorBrush x:Key="MetroRadiance.Brushes.ComboBox.Static.Editable.Background" Color="{DynamicResource SemiactiveBackgroundColorKey}"/>
    <SolidColorBrush x:Key="MetroRadiance.Brushes.ComboBox.Static.Editable.Border" Color="{DynamicResource SemiactiveBorderColorKey}"/>
    <SolidColorBrush x:Key="MetroRadiance.Brushes.ComboBox.Static.Editable.Button.Background" Color="{DynamicResource BackgroundColorKey}"/>
    <SolidColorBrush x:Key="MetroRadiance.Brushes.ComboBox.Static.Editable.Button.Border" Color="{DynamicResource SemiactiveBorderColorKey}"/>

    <SolidColorBrush x:Key="MetroRadiance.Brushes.ComboBox.MouseOver.Glyph" Color="{DynamicResource AccentColorKey}"/>
    <SolidColorBrush x:Key="MetroRadiance.Brushes.ComboBox.MouseOver.Background" Color="{DynamicResource ActiveBackgroundColorKey}"/>
    <SolidColorBrush x:Key="MetroRadiance.Brushes.ComboBox.MouseOver.Border" Color="{DynamicResource AccentColorKey}"/>
    <SolidColorBrush x:Key="MetroRadiance.Brushes.ComboBox.MouseOver.Editable.Background" Color="{DynamicResource SemiactiveBackgroundColorKey}"/>
    <SolidColorBrush x:Key="MetroRadiance.Brushes.ComboBox.MouseOver.Editable.Border" Color="{DynamicResource SemiactiveBorderColorKey}"/>
    <SolidColorBrush x:Key="MetroRadiance.Brushes.ComboBox.MouseOver.Editable.Button.Background" Color="{DynamicResource BackgroundColorKey}"/>
    <SolidColorBrush x:Key="MetroRadiance.Brushes.ComboBox.MouseOver.Editable.Button.Border" Color="{DynamicResource AccentColorKey}"/>

    <SolidColorBrush x:Key="MetroRadiance.Brushes.ComboBox.Pressed.Glyph" Color="{DynamicResource AccentForegroundColorKey}"/>
    <SolidColorBrush x:Key="MetroRadiance.Brushes.ComboBox.Pressed.Background" Color="{DynamicResource ActiveBackgroundColorKey}"/>
    <SolidColorBrush x:Key="MetroRadiance.Brushes.ComboBox.Pressed.Border" Color="{DynamicResource AccentColorKey}"/>
    <SolidColorBrush x:Key="MetroRadiance.Brushes.ComboBox.Pressed.Editable.Background" Color="{DynamicResource SemiactiveBackgroundColorKey}"/>
    <SolidColorBrush x:Key="MetroRadiance.Brushes.ComboBox.Pressed.Editable.Border" Color="{DynamicResource SemiactiveBorderColorKey}"/>
    <SolidColorBrush x:Key="MetroRadiance.Brushes.ComboBox.Pressed.Editable.Button.Background" Color="{DynamicResource BackgroundColorKey}"/>
    <SolidColorBrush x:Key="MetroRadiance.Brushes.ComboBox.Pressed.Editable.Button.Border" Color="{DynamicResource AccentColorKey}"/>

    <SolidColorBrush x:Key="MetroRadiance.Brushes.ComboBox.Opened.Background" Color="{DynamicResource BackgroundColorKey}"/>
    <SolidColorBrush x:Key="MetroRadiance.Brushes.ComboBox.Opened.Border" Color="{DynamicResource BorderColorKey}"/>
    <SolidColorBrush x:Key="MetroRadiance.Brushes.ComboBox.Opened.Editable.Background" Color="{DynamicResource SemiactiveBackgroundColorKey}"/>
    <SolidColorBrush x:Key="MetroRadiance.Brushes.ComboBox.Opened.Editable.Border" Color="{DynamicResource BorderColorKey}"/>
    <SolidColorBrush x:Key="MetroRadiance.Brushes.ComboBox.Opened.Editable.Button.Background" Color="{DynamicResource AccentColorKey}"/>
    <SolidColorBrush x:Key="MetroRadiance.Brushes.ComboBox.Opened.Editable.Button.Border" Color="{DynamicResource AccentColorKey}"/>

    <SolidColorBrush x:Key="MetroRadiance.Brushes.ComboBox.Disabled.Foreground" Color="{DynamicResource InactiveForegroundColorKey}"/>
    <SolidColorBrush x:Key="MetroRadiance.Brushes.ComboBox.Disabled.Glyph" Color="{DynamicResource InactiveForegroundColorKey}"/>
    <SolidColorBrush x:Key="MetroRadiance.Brushes.ComboBox.Disabled.Background" Color="{DynamicResource InactiveBackgroundColorKey}"/>
    <SolidColorBrush x:Key="MetroRadiance.Brushes.ComboBox.Disabled.Border" Color="{DynamicResource InactiveBorderColorKey}"/>
    <SolidColorBrush x:Key="MetroRadiance.Brushes.ComboBox.Disabled.Editable.Background" Color="{DynamicResource InactiveBackgroundColorKey}"/>
    <SolidColorBrush x:Key="MetroRadiance.Brushes.ComboBox.Disabled.Editable.Border" Color="{DynamicResource InactiveBorderColorKey}"/>
    <SolidColorBrush x:Key="MetroRadiance.Brushes.ComboBox.Disabled.Editable.Button.Background" Color="Transparent"/>
    <SolidColorBrush x:Key="MetroRadiance.Brushes.ComboBox.Disabled.Editable.Button.Border" Color="{DynamicResource InactiveBorderColorKey}"/>

    <Style x:Key="MetroRadiance.Styles.ComboBox.ToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="templateRoot"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="true">
                        <Border x:Name="splitBorder"
                                BorderBrush="Transparent"
                                BorderThickness="0.99"
                                HorizontalAlignment="Right"
                                Margin="0"
                                SnapsToDevicePixels="true"
                                Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                            <Path x:Name="arrow"
                                  Data="M 0.0,0.0 L 3.5,4.0 7.0,0.0 z"
                                  Fill="{DynamicResource MetroRadiance.Brushes.ComboBox.Static.Glyph}"
							      HorizontalAlignment="Center"
                                  Margin="0"
							      VerticalAlignment="Center" />
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                           Value="true"/>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot"
                                    Value="{DynamicResource MetroRadiance.Brushes.ComboBox.Static.Editable.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot"
                                    Value="{DynamicResource MetroRadiance.Brushes.ComboBox.Static.Editable.Border}"/>
                            <Setter Property="Background" TargetName="splitBorder"
                                    Value="{DynamicResource MetroRadiance.Brushes.ComboBox.Static.Editable.Button.Background}"/>
                            <Setter Property="BorderBrush" TargetName="splitBorder"
                                    Value="{DynamicResource MetroRadiance.Brushes.ComboBox.Static.Editable.Button.Border}"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Fill" TargetName="arrow" Value="{DynamicResource MetroRadiance.Brushes.ComboBox.MouseOver.Glyph}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                           Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource MetroRadiance.Brushes.ComboBox.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource MetroRadiance.Brushes.ComboBox.MouseOver.Border}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                           Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource MetroRadiance.Brushes.ComboBox.MouseOver.Editable.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource MetroRadiance.Brushes.ComboBox.MouseOver.Editable.Border}"/>
                            <Setter Property="Background" TargetName="splitBorder" Value="{DynamicResource MetroRadiance.Brushes.ComboBox.MouseOver.Editable.Button.Background}"/>
                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="{DynamicResource MetroRadiance.Brushes.ComboBox.MouseOver.Editable.Button.Border}"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Fill" TargetName="arrow" Value="{DynamicResource MetroRadiance.Brushes.ComboBox.Pressed.Glyph}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                           Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource MetroRadiance.Brushes.ComboBox.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource MetroRadiance.Brushes.ComboBox.Pressed.Border}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                           Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource MetroRadiance.Brushes.ComboBox.Pressed.Editable.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource MetroRadiance.Brushes.ComboBox.Pressed.Editable.Border}"/>
                            <Setter Property="Background" TargetName="splitBorder" Value="{DynamicResource MetroRadiance.Brushes.ComboBox.Pressed.Editable.Button.Background}"/>
                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="{DynamicResource MetroRadiance.Brushes.ComboBox.Pressed.Editable.Button.Border}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                           Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource MetroRadiance.Brushes.ComboBox.Opened.Editable.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource MetroRadiance.Brushes.ComboBox.Opened.Editable.Border}"/>
                            <Setter Property="Background" TargetName="splitBorder" Value="{DynamicResource MetroRadiance.Brushes.ComboBox.Opened.Editable.Button.Background}"/>
                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="{DynamicResource MetroRadiance.Brushes.ComboBox.Opened.Editable.Button.Border}"/>
                            <Setter Property="Fill" TargetName="arrow" Value="{DynamicResource MetroRadiance.Brushes.ComboBox.Pressed.Glyph}"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Fill" TargetName="arrow" Value="{DynamicResource MetroRadiance.Brushes.ComboBox.Disabled.Glyph}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                           Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource MetroRadiance.Brushes.ComboBox.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource MetroRadiance.Brushes.ComboBox.Disabled.Border}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                           Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource MetroRadiance.Brushes.ComboBox.Disabled.Editable.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource MetroRadiance.Brushes.ComboBox.Disabled.Editable.Border}"/>
                            <Setter Property="Background" TargetName="splitBorder" Value="{DynamicResource MetroRadiance.Brushes.ComboBox.Disabled.Editable.Button.Background}"/>
                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="{DynamicResource MetroRadiance.Brushes.ComboBox.Disabled.Editable.Button.Border}"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="MetroRadiance.Templates.ComboBox"
                     TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
                                  Width="0"/>
            </Grid.ColumnDefinitions>
            <Popup x:Name="PART_Popup"
                   AllowsTransparency="true"
                   Grid.ColumnSpan="2"
                   IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                   Margin="1"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                   Placement="Bottom">
                <Themes:SystemDropShadowChrome
                    x:Name="shadow"
                    Color="Transparent"
                    MaxHeight="{TemplateBinding MaxDropDownHeight}"
                    MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                    <Border x:Name="dropDownBorder"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}">
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid x:Name="grid"
                                  RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="canvas"
                                        HorizontalAlignment="Left"
                                        Height="0"
                                        VerticalAlignment="Top"
                                        Width="0">
                                    <Rectangle x:Name="opaqueRect"
                                               Fill="{Binding Background, ElementName=dropDownBorder}"
                                               Height="{Binding ActualHeight, ElementName=dropDownBorder}"
                                               Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter"
                                                KeyboardNavigation.DirectionalNavigation="Contained"
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Themes:SystemDropShadowChrome>
            </Popup>
            <ToggleButton x:Name="toggleButton"
                          Grid.ColumnSpan="2"
                          BorderBrush="{TemplateBinding BorderBrush}"
                          BorderThickness="{TemplateBinding BorderThickness}"
                          Background="{TemplateBinding Background}"
                          IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                          Style="{StaticResource MetroRadiance.Styles.ComboBox.ToggleButton}"/>
            <ContentPresenter x:Name="contentPresenter"
                              ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                              Content="{TemplateBinding SelectionBoxItem}"
                              ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              IsHitTestVisible="false"
                              Margin="{TemplateBinding Padding}"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasDropShadow"
                     SourceName="PART_Popup"
                     Value="true">
                <Setter Property="Margin"
                        TargetName="shadow"
                        Value="0,0,5,5"/>
                <Setter Property="Color"
                        TargetName="shadow"
                        Value="#71000000"/>
            </Trigger>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height"
                        TargetName="dropDownBorder"
                        Value="95"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                <Setter Property="Canvas.Top"
                        TargetName="opaqueRect"
                        Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter Property="Canvas.Left"
                        TargetName="opaqueRect"
                        Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="MetroRadiance.Styles.ComboBox.EditableTextBox"
           TargetType="{x:Type TextBox}"
           BasedOn="{StaticResource MetroRadiance.Styles.TextBoxBase}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="0" />
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <!--
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ScrollViewer x:Name="PART_ContentHost"
                                  Background="Transparent"
                                  Focusable="false"
                                  HorizontalScrollBarVisibility="Hidden"
                                  VerticalScrollBarVisibility="Hidden"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        -->
    </Style>

    <ControlTemplate x:Key="MetroRadiance.Templates.ComboBox.Editable"
                     TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
                                  Width="0"/>
            </Grid.ColumnDefinitions>
            <Popup x:Name="PART_Popup"
                   AllowsTransparency="true"
                   Grid.ColumnSpan="2"
                   IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                   Placement="Bottom">
                <Themes:SystemDropShadowChrome
                    x:Name="shadow"
                    Color="Transparent"
                    MaxHeight="{TemplateBinding MaxDropDownHeight}"
                    MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                    <Border x:Name="dropDownBorder"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}">
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid x:Name="grid"
                                  RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="canvas"
                                        HorizontalAlignment="Left"
                                        Height="0"
                                        VerticalAlignment="Top"
                                        Width="0">
                                    <Rectangle x:Name="opaqueRect"
                                               Fill="{Binding Background, ElementName=dropDownBorder}"
                                               Height="{Binding ActualHeight, ElementName=dropDownBorder}"
                                               Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                </Canvas>
                                <ItemsPresenter
                                    x:Name="ItemsPresenter"
                                    KeyboardNavigation.DirectionalNavigation="Contained"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Themes:SystemDropShadowChrome>
            </Popup>
            <ToggleButton x:Name="toggleButton"
                          BorderBrush="{TemplateBinding BorderBrush}"
                          BorderThickness="{TemplateBinding BorderThickness}"
                          Background="{TemplateBinding Background}"
                          Grid.ColumnSpan="2"
                          IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                          Style="{StaticResource MetroRadiance.Styles.ComboBox.ToggleButton}"/>
            <Border x:Name="border"
                    Background="{DynamicResource MetroRadiance.Brushes.ComboBox.Static.Editable.Background}"
                    Margin="{TemplateBinding BorderThickness}">
                <TextBox x:Name="PART_EditableTextBox"
                         HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                         IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                         Padding="{TemplateBinding Padding}"
                         Style="{StaticResource MetroRadiance.Styles.ComboBox.EditableTextBox}"
                         VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" TargetName="PART_EditableTextBox" Value="{DynamicResource MetroRadiance.Brushes.ComboBox.Disabled.Foreground}"/>
                <!--
                <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                -->
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="true">
                <Setter Property="Foreground" Value="Black"/>
            </Trigger>
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
            </Trigger>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="MetroRadiance.Styles.ComboBox.Base" TargetType="{x:Type ComboBox}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource MetroRadianceInnerFocusVisualStyleKey}"/>
        <Setter Property="Background" Value="{DynamicResource MetroRadiance.Brushes.ComboBox.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource MetroRadiance.Brushes.ComboBox.Static.Border}"/>
        <Setter Property="BorderThickness" Value="0.999"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Padding" Value="6,3,5,3"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ComboBoxItem}">
                    <Setter Property="SnapsToDevicePixels"
							Value="true" />
                    <Setter Property="OverridesDefaultStyle"
							Value="true" />
                    <Setter Property="Background"
							Value="Transparent" />
                    <Setter Property="FocusVisualStyle"
							Value="{x:Null}" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                                <Border CornerRadius="0"
										Padding="2"
										Background="{TemplateBinding Background}"
										SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                    <ContentPresenter />
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsHighlighted"
											 Value="True">
                                        <Setter Property="Background"
												Value="{DynamicResource HighlightBackgroundBrushKey}" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template" Value="{StaticResource MetroRadiance.Templates.ComboBox}"/>
        <Style.Triggers>
            <Trigger Property="IsEditable" Value="true">
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Padding" Value="1"/>
                <Setter Property="Foreground" Value="{DynamicResource MetroRadiance.Brushes.ComboBox.Static.Foreground}"/>
                <Setter Property="Template" Value="{StaticResource MetroRadiance.Templates.ComboBox.Editable}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource MetroRadiance.Brushes.ComboBox.Disabled.Foreground}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="MetroRadiance.Styles.ComboBox" TargetType="{x:Type ComboBox}"
           BasedOn="{StaticResource MetroRadiance.Styles.ComboBox.Base}">
        <Setter Property="Foreground" Value="{DynamicResource MetroRadiance.Brushes.ComboBox.Static.Foreground}"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource MetroRadiance.Brushes.ComboBox.Disabled.Foreground}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>
